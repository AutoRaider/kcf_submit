# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rect', [dirname(__file__)])
        except ImportError:
            import _rect
            return _rect
        if fp is not None:
            try:
                _mod = imp.load_module('_rect', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rect = swig_import_helper()
    del swig_import_helper
else:
    import _rect
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



import sys as _sys
if _sys.byteorder == 'little':
    _cv_numpy_endianess = '<'
else:
    _cv_numpy_endianess = '>'

_cv_numpy_typestr_map = {}
_cv_numpy_bla = {}

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rect.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _rect.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rect.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rect.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rect.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rect.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rect.SwigPyIterator_copy(self)

    def next(self):
        return _rect.SwigPyIterator_next(self)

    def __next__(self):
        return _rect.SwigPyIterator___next__(self)

    def previous(self):
        return _rect.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rect.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rect.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rect.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rect.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rect.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rect.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rect.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _rect.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


_array_map = {}


_rect.CV_VERSION_MAJOR_swigconstant(_rect)
CV_VERSION_MAJOR = _rect.CV_VERSION_MAJOR

_rect.CV_VERSION_MINOR_swigconstant(_rect)
CV_VERSION_MINOR = _rect.CV_VERSION_MINOR

_rect.CV_VERSION_REVISION_swigconstant(_rect)
CV_VERSION_REVISION = _rect.CV_VERSION_REVISION

_rect.CV_VERSION_STATUS_swigconstant(_rect)
CV_VERSION_STATUS = _rect.CV_VERSION_STATUS

_rect.CV_VERSION_swigconstant(_rect)
CV_VERSION = _rect.CV_VERSION

_rect.CV_MAJOR_VERSION_swigconstant(_rect)
CV_MAJOR_VERSION = _rect.CV_MAJOR_VERSION

_rect.CV_MINOR_VERSION_swigconstant(_rect)
CV_MINOR_VERSION = _rect.CV_MINOR_VERSION

_rect.CV_SUBMINOR_VERSION_swigconstant(_rect)
CV_SUBMINOR_VERSION = _rect.CV_SUBMINOR_VERSION
class DataType_bool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_bool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_bool, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_bool_generic_type
    channels = _rect.DataType_bool_channels
    fmt = _rect.DataType_bool_fmt

    def __init__(self):
        this = _rect.new_DataType_bool()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_bool
    __del__ = lambda self: None
DataType_bool_swigregister = _rect.DataType_bool_swigregister
DataType_bool_swigregister(DataType_bool)

class DataType_uchar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_uchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_uchar, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_uchar_generic_type
    channels = _rect.DataType_uchar_channels
    fmt = _rect.DataType_uchar_fmt

    def __init__(self):
        this = _rect.new_DataType_uchar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_uchar
    __del__ = lambda self: None
DataType_uchar_swigregister = _rect.DataType_uchar_swigregister
DataType_uchar_swigregister(DataType_uchar)

class DataType_schar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_schar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_schar, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_schar_generic_type
    channels = _rect.DataType_schar_channels
    fmt = _rect.DataType_schar_fmt

    def __init__(self):
        this = _rect.new_DataType_schar()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_schar
    __del__ = lambda self: None
DataType_schar_swigregister = _rect.DataType_schar_swigregister
DataType_schar_swigregister(DataType_schar)

class DataType_char(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_char, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_char_generic_type
    channels = _rect.DataType_char_channels
    fmt = _rect.DataType_char_fmt

    def __init__(self):
        this = _rect.new_DataType_char()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_char
    __del__ = lambda self: None
DataType_char_swigregister = _rect.DataType_char_swigregister
DataType_char_swigregister(DataType_char)

class DataType_ushort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_ushort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_ushort, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_ushort_generic_type
    channels = _rect.DataType_ushort_channels
    fmt = _rect.DataType_ushort_fmt

    def __init__(self):
        this = _rect.new_DataType_ushort()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_ushort
    __del__ = lambda self: None
DataType_ushort_swigregister = _rect.DataType_ushort_swigregister
DataType_ushort_swigregister(DataType_ushort)

class DataType_short(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_short, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_short, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_short_generic_type
    channels = _rect.DataType_short_channels
    fmt = _rect.DataType_short_fmt

    def __init__(self):
        this = _rect.new_DataType_short()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_short
    __del__ = lambda self: None
DataType_short_swigregister = _rect.DataType_short_swigregister
DataType_short_swigregister(DataType_short)

class DataType_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_int, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_int_generic_type
    channels = _rect.DataType_int_channels
    fmt = _rect.DataType_int_fmt

    def __init__(self):
        this = _rect.new_DataType_int()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_int
    __del__ = lambda self: None
DataType_int_swigregister = _rect.DataType_int_swigregister
DataType_int_swigregister(DataType_int)

class DataType_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_float, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_float_generic_type
    channels = _rect.DataType_float_channels
    fmt = _rect.DataType_float_fmt

    def __init__(self):
        this = _rect.new_DataType_float()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_float
    __del__ = lambda self: None
DataType_float_swigregister = _rect.DataType_float_swigregister
DataType_float_swigregister(DataType_float)

class DataType_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataType_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataType_double, name)
    __repr__ = _swig_repr
    generic_type = _rect.DataType_double_generic_type
    channels = _rect.DataType_double_channels
    fmt = _rect.DataType_double_fmt

    def __init__(self):
        this = _rect.new_DataType_double()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_DataType_double
    __del__ = lambda self: None
DataType_double_swigregister = _rect.DataType_double_swigregister
DataType_double_swigregister(DataType_double)

class Matx_AddOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_AddOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_AddOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rect.new_Matx_AddOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_Matx_AddOp
    __del__ = lambda self: None
Matx_AddOp_swigregister = _rect.Matx_AddOp_swigregister
Matx_AddOp_swigregister(Matx_AddOp)

class Matx_SubOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_SubOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_SubOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rect.new_Matx_SubOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_Matx_SubOp
    __del__ = lambda self: None
Matx_SubOp_swigregister = _rect.Matx_SubOp_swigregister
Matx_SubOp_swigregister(Matx_SubOp)

class Matx_ScaleOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_ScaleOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_ScaleOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rect.new_Matx_ScaleOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_Matx_ScaleOp
    __del__ = lambda self: None
Matx_ScaleOp_swigregister = _rect.Matx_ScaleOp_swigregister
Matx_ScaleOp_swigregister(Matx_ScaleOp)

class Matx_MulOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_MulOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_MulOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rect.new_Matx_MulOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_Matx_MulOp
    __del__ = lambda self: None
Matx_MulOp_swigregister = _rect.Matx_MulOp_swigregister
Matx_MulOp_swigregister(Matx_MulOp)

class Matx_DivOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_DivOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_DivOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rect.new_Matx_DivOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_Matx_DivOp
    __del__ = lambda self: None
Matx_DivOp_swigregister = _rect.Matx_DivOp_swigregister
Matx_DivOp_swigregister(Matx_DivOp)

class Matx_MatMulOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_MatMulOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_MatMulOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rect.new_Matx_MatMulOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_Matx_MatMulOp
    __del__ = lambda self: None
Matx_MatMulOp_swigregister = _rect.Matx_MatMulOp_swigregister
Matx_MatMulOp_swigregister(Matx_MatMulOp)

class Matx_TOp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matx_TOp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matx_TOp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rect.new_Matx_TOp()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _rect.delete_Matx_TOp
    __del__ = lambda self: None
Matx_TOp_swigregister = _rect.Matx_TOp_swigregister
Matx_TOp_swigregister(Matx_TOp)

class _Rect__int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Rect__int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Rect__int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Rect__int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def tl(self):
        return _rect._Rect__int_tl(self)

    def br(self):
        return _rect._Rect__int_br(self)

    def size(self):
        return _rect._Rect__int_size(self)

    def area(self):
        return _rect._Rect__int_area(self)

    def contains(self, pt):
        return _rect._Rect__int_contains(self, pt)
    __swig_setmethods__["x"] = _rect._Rect__int_x_set
    __swig_getmethods__["x"] = _rect._Rect__int_x_get
    if _newclass:
        x = _swig_property(_rect._Rect__int_x_get, _rect._Rect__int_x_set)
    __swig_setmethods__["y"] = _rect._Rect__int_y_set
    __swig_getmethods__["y"] = _rect._Rect__int_y_get
    if _newclass:
        y = _swig_property(_rect._Rect__int_y_get, _rect._Rect__int_y_set)
    __swig_setmethods__["width"] = _rect._Rect__int_width_set
    __swig_getmethods__["width"] = _rect._Rect__int_width_get
    if _newclass:
        width = _swig_property(_rect._Rect__int_width_get, _rect._Rect__int_width_set)
    __swig_setmethods__["height"] = _rect._Rect__int_height_set
    __swig_getmethods__["height"] = _rect._Rect__int_height_get
    if _newclass:
        height = _swig_property(_rect._Rect__int_height_get, _rect._Rect__int_height_set)

    def __iter__(self):
        return iter((self.x, self.y, self.width, self.height))


    def __str__(self):
        return _rect._Rect__int___str__(self)
    __swig_destroy__ = _rect.delete__Rect__int
    __del__ = lambda self: None
_Rect__int_swigregister = _rect._Rect__int_swigregister
_Rect__int_swigregister(_Rect__int)


Rect2i = _Rect__int

class _Rect__float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Rect__float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Rect__float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Rect__float(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def tl(self):
        return _rect._Rect__float_tl(self)

    def br(self):
        return _rect._Rect__float_br(self)

    def size(self):
        return _rect._Rect__float_size(self)

    def area(self):
        return _rect._Rect__float_area(self)

    def contains(self, pt):
        return _rect._Rect__float_contains(self, pt)
    __swig_setmethods__["x"] = _rect._Rect__float_x_set
    __swig_getmethods__["x"] = _rect._Rect__float_x_get
    if _newclass:
        x = _swig_property(_rect._Rect__float_x_get, _rect._Rect__float_x_set)
    __swig_setmethods__["y"] = _rect._Rect__float_y_set
    __swig_getmethods__["y"] = _rect._Rect__float_y_get
    if _newclass:
        y = _swig_property(_rect._Rect__float_y_get, _rect._Rect__float_y_set)
    __swig_setmethods__["width"] = _rect._Rect__float_width_set
    __swig_getmethods__["width"] = _rect._Rect__float_width_get
    if _newclass:
        width = _swig_property(_rect._Rect__float_width_get, _rect._Rect__float_width_set)
    __swig_setmethods__["height"] = _rect._Rect__float_height_set
    __swig_getmethods__["height"] = _rect._Rect__float_height_get
    if _newclass:
        height = _swig_property(_rect._Rect__float_height_get, _rect._Rect__float_height_set)

    def __iter__(self):
        return iter((self.x, self.y, self.width, self.height))


    def __str__(self):
        return _rect._Rect__float___str__(self)
    __swig_destroy__ = _rect.delete__Rect__float
    __del__ = lambda self: None
_Rect__float_swigregister = _rect._Rect__float_swigregister
_Rect__float_swigregister(_Rect__float)


Rect2f = _Rect__float

class _Rect__double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Rect__double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Rect__double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Rect__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def tl(self):
        return _rect._Rect__double_tl(self)

    def br(self):
        return _rect._Rect__double_br(self)

    def size(self):
        return _rect._Rect__double_size(self)

    def area(self):
        return _rect._Rect__double_area(self)

    def contains(self, pt):
        return _rect._Rect__double_contains(self, pt)
    __swig_setmethods__["x"] = _rect._Rect__double_x_set
    __swig_getmethods__["x"] = _rect._Rect__double_x_get
    if _newclass:
        x = _swig_property(_rect._Rect__double_x_get, _rect._Rect__double_x_set)
    __swig_setmethods__["y"] = _rect._Rect__double_y_set
    __swig_getmethods__["y"] = _rect._Rect__double_y_get
    if _newclass:
        y = _swig_property(_rect._Rect__double_y_get, _rect._Rect__double_y_set)
    __swig_setmethods__["width"] = _rect._Rect__double_width_set
    __swig_getmethods__["width"] = _rect._Rect__double_width_get
    if _newclass:
        width = _swig_property(_rect._Rect__double_width_get, _rect._Rect__double_width_set)
    __swig_setmethods__["height"] = _rect._Rect__double_height_set
    __swig_getmethods__["height"] = _rect._Rect__double_height_get
    if _newclass:
        height = _swig_property(_rect._Rect__double_height_get, _rect._Rect__double_height_set)

    def __iter__(self):
        return iter((self.x, self.y, self.width, self.height))


    def __str__(self):
        return _rect._Rect__double___str__(self)
    __swig_destroy__ = _rect.delete__Rect__double
    __del__ = lambda self: None
_Rect__double_swigregister = _rect._Rect__double_swigregister
_Rect__double_swigregister(_Rect__double)


Rect2d = _Rect__double


Rect = Rect2i

class _Size__int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Size__int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Size__int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Size__int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def area(self):
        return _rect._Size__int_area(self)
    __swig_setmethods__["width"] = _rect._Size__int_width_set
    __swig_getmethods__["width"] = _rect._Size__int_width_get
    if _newclass:
        width = _swig_property(_rect._Size__int_width_get, _rect._Size__int_width_set)
    __swig_setmethods__["height"] = _rect._Size__int_height_set
    __swig_getmethods__["height"] = _rect._Size__int_height_get
    if _newclass:
        height = _swig_property(_rect._Size__int_height_get, _rect._Size__int_height_set)

    def __iter__(self):
        return iter((self.width, self.height))


    def __str__(self):
        return _rect._Size__int___str__(self)
    __swig_destroy__ = _rect.delete__Size__int
    __del__ = lambda self: None
_Size__int_swigregister = _rect._Size__int_swigregister
_Size__int_swigregister(_Size__int)


Size2i = _Size__int

class _Size__float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Size__float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Size__float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Size__float(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def area(self):
        return _rect._Size__float_area(self)
    __swig_setmethods__["width"] = _rect._Size__float_width_set
    __swig_getmethods__["width"] = _rect._Size__float_width_get
    if _newclass:
        width = _swig_property(_rect._Size__float_width_get, _rect._Size__float_width_set)
    __swig_setmethods__["height"] = _rect._Size__float_height_set
    __swig_getmethods__["height"] = _rect._Size__float_height_get
    if _newclass:
        height = _swig_property(_rect._Size__float_height_get, _rect._Size__float_height_set)

    def __iter__(self):
        return iter((self.width, self.height))


    def __str__(self):
        return _rect._Size__float___str__(self)
    __swig_destroy__ = _rect.delete__Size__float
    __del__ = lambda self: None
_Size__float_swigregister = _rect._Size__float_swigregister
_Size__float_swigregister(_Size__float)


Size2f = _Size__float

class _Size__double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Size__double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Size__double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Size__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def area(self):
        return _rect._Size__double_area(self)
    __swig_setmethods__["width"] = _rect._Size__double_width_set
    __swig_getmethods__["width"] = _rect._Size__double_width_get
    if _newclass:
        width = _swig_property(_rect._Size__double_width_get, _rect._Size__double_width_set)
    __swig_setmethods__["height"] = _rect._Size__double_height_set
    __swig_getmethods__["height"] = _rect._Size__double_height_get
    if _newclass:
        height = _swig_property(_rect._Size__double_height_get, _rect._Size__double_height_set)

    def __iter__(self):
        return iter((self.width, self.height))


    def __str__(self):
        return _rect._Size__double___str__(self)
    __swig_destroy__ = _rect.delete__Size__double
    __del__ = lambda self: None
_Size__double_swigregister = _rect._Size__double_swigregister
_Size__double_swigregister(_Size__double)


Size2d = _Size__double


Size = Size2i

class _Point__int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Point__int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Point__int, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Point__int(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def dot(self, pt):
        return _rect._Point__int_dot(self, pt)

    def ddot(self, pt):
        return _rect._Point__int_ddot(self, pt)

    def cross(self, pt):
        return _rect._Point__int_cross(self, pt)
    __swig_setmethods__["x"] = _rect._Point__int_x_set
    __swig_getmethods__["x"] = _rect._Point__int_x_get
    if _newclass:
        x = _swig_property(_rect._Point__int_x_get, _rect._Point__int_x_set)
    __swig_setmethods__["y"] = _rect._Point__int_y_set
    __swig_getmethods__["y"] = _rect._Point__int_y_get
    if _newclass:
        y = _swig_property(_rect._Point__int_y_get, _rect._Point__int_y_set)

    def __iter__(self):
        return iter((self.x, self.y))


    def __str__(self):
        return _rect._Point__int___str__(self)
    __swig_destroy__ = _rect.delete__Point__int
    __del__ = lambda self: None
_Point__int_swigregister = _rect._Point__int_swigregister
_Point__int_swigregister(_Point__int)


Point2i = _Point__int

class _Point__float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Point__float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Point__float, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Point__float(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def dot(self, pt):
        return _rect._Point__float_dot(self, pt)

    def ddot(self, pt):
        return _rect._Point__float_ddot(self, pt)

    def cross(self, pt):
        return _rect._Point__float_cross(self, pt)
    __swig_setmethods__["x"] = _rect._Point__float_x_set
    __swig_getmethods__["x"] = _rect._Point__float_x_get
    if _newclass:
        x = _swig_property(_rect._Point__float_x_get, _rect._Point__float_x_set)
    __swig_setmethods__["y"] = _rect._Point__float_y_set
    __swig_getmethods__["y"] = _rect._Point__float_y_get
    if _newclass:
        y = _swig_property(_rect._Point__float_y_get, _rect._Point__float_y_set)

    def __iter__(self):
        return iter((self.x, self.y))


    def __str__(self):
        return _rect._Point__float___str__(self)
    __swig_destroy__ = _rect.delete__Point__float
    __del__ = lambda self: None
_Point__float_swigregister = _rect._Point__float_swigregister
_Point__float_swigregister(_Point__float)


Point2f = _Point__float

class _Point__double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Point__double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Point__double, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rect.new__Point__double(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def dot(self, pt):
        return _rect._Point__double_dot(self, pt)

    def ddot(self, pt):
        return _rect._Point__double_ddot(self, pt)

    def cross(self, pt):
        return _rect._Point__double_cross(self, pt)
    __swig_setmethods__["x"] = _rect._Point__double_x_set
    __swig_getmethods__["x"] = _rect._Point__double_x_get
    if _newclass:
        x = _swig_property(_rect._Point__double_x_get, _rect._Point__double_x_set)
    __swig_setmethods__["y"] = _rect._Point__double_y_set
    __swig_getmethods__["y"] = _rect._Point__double_y_get
    if _newclass:
        y = _swig_property(_rect._Point__double_y_get, _rect._Point__double_y_set)

    def __iter__(self):
        return iter((self.x, self.y))


    def __str__(self):
        return _rect._Point__double___str__(self)
    __swig_destroy__ = _rect.delete__Point__double
    __del__ = lambda self: None
_Point__double_swigregister = _rect._Point__double_swigregister
_Point__double_swigregister(_Point__double)


Point2d = _Point__double


Point = Point2i


def return_Rect():
    return _rect.return_Rect()
return_Rect = _rect.return_Rect

def receive_Rect(r):
    return _rect.receive_Rect(r)
receive_Rect = _rect.receive_Rect

def return_Rect2i():
    return _rect.return_Rect2i()
return_Rect2i = _rect.return_Rect2i

def receive_Rect2i(r):
    return _rect.receive_Rect2i(r)
receive_Rect2i = _rect.receive_Rect2i

def return_Rect2d():
    return _rect.return_Rect2d()
return_Rect2d = _rect.return_Rect2d

def receive_Rect2d(r):
    return _rect.receive_Rect2d(r)
receive_Rect2d = _rect.receive_Rect2d

def return_Rect2f():
    return _rect.return_Rect2f()
return_Rect2f = _rect.return_Rect2f

def receive_Rect2f(r):
    return _rect.receive_Rect2f(r)
receive_Rect2f = _rect.receive_Rect2f
# This file is compatible with both classic and new-style classes.


